openapi: 3.0.0
info:
  title: Meme Index API
  version: 0.0.1
tags:
  - name: files
    description: Operations related to file management, including uploading, retrieving, and deleting files. 
  - name: tags
    description: Operations related to managing tags.
paths:
  /files/list:
    get:
      tags:
        - files
      summary: List files with pagination
      description: Retrieve a list of files with pagination data.
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileListResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
  /files/random:
    get:
      summary: Get a random file
      description: Retrieve a random file.
      tags:
        - files
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meme'
        default:
          $ref: "#/components/responses/Default"
  /files/{id}:
    get:
      summary: Get a file by ID
      description: Retrieve a file by its ID.
      tags:
        - files
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meme'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: "#/components/responses/Default"
    delete:
      summary: Delete a file by ID
      description: Delete a file by its ID.
      tags:
        - files
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: "#/components/responses/Default"
  /files/upload:
    post:
      summary: Upload a File
      description: File uploaded successfully with associated attributes (tags, URL, and description) and stored in the database
      tags:
        - files
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                tags:
                  type: array
                  items:
                    type: string
                description:
                  type: string
                url:
                  type: string
                  format: uri
              required:
                - file
      responses:
        '200':
          description: Successful upload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponse'
        '400':
          $ref: "#/components/responses/BadRequestError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/Default"
  /tags/list:
    get:
      tags:
        - tags
      summary: List tags with pagination
      description: Retrieve a paginated list of tags.
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  tags:
                    type: array
                    items:
                      type: string
                  page:
                    type: integer
                  pageSize:
                    type: integer
                  total:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/Default'
  /tags/autocomplete:
    get:
      tags:
        - tags
      summary: Autocomplete tags
      description: Retrieve a list of tags that match the query parameter.
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
            description: The query string to match tags against
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/Default'
  /tags/search:
    get:
      tags:
        - tags
      summary: List files with pagination and tag filtering
      description: Retrieve a list of files with pagination data and tag filtering.
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            default: 50
        - name: tags
          in: query
          required: true
          schema:
            type: string
            description: Comma-separated list of tags to filter by
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileListResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: "#/components/responses/Default"
  /files/{id}/tags:
    patch:
      tags:
        - tags
      summary: Add tags to a file by ID
      description: Add tags to a file by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  type: array
                  items:
                    type: string
              required:
                - tags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meme'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: "#/components/responses/Default"
    delete:
      tags:
        - tags
      summary: Remove tags from a file by ID
      description: Remove tags from a file by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  type: array
                  items:
                    type: string
              required:
                - tags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meme'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/Default'
components:
  responses:
    OK:
      description: OK
    BadRequestError:
      description: Bad request
    NotFoundError:
      description: Not found
    NoContent:
      description: No content
    Default:
      description: Internal sever error or structural error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
    UploadResponse:
      type: object
      properties:
        fileID:
          type: string
        message:
          type: string
    FileListResponse:
      type: object
      properties:
        memes:
          type: array
          items:
            $ref: '#/components/schemas/Meme'
        page:
          type: integer
        pageSize:
          type: integer
        total:
          type: integer
    Meme:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        contenttype:
          type: string
        tags:
          type: array
          items:
            type: string
        url:
          type: string
          format: uri
          nullable: true
        description:
          type: string
          nullable: true
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        errors:
          type: array
          items:
            $ref: "#/components/schemas/FieldError"
      required:
        - message
        - code

    FieldError:
      type: object
      properties:
        field:
          type: string
        error:
          type: string
      required:
        - field
        - error